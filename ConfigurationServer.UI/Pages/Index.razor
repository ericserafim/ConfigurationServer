@page "/"
@page "/{appName}"
@inject RedisService RedisService

<h3>Application</h3>

<div class="alert alert-success @(DisplayAlert ? "visible" : "invisible")" role="alert">
    @AlertMessage
    <button type="button" class="btn btn-close button-close" @onclick="() => DisplayAlert = false">X</button>
</div>

<EditForm Model="Application">
    <div class="form-group">
        <label for="appname">Application Name</label>
        <input type="text" class="form-control" id="appname" placeholder="Enter name" @bind-value="@Application.Name">
    </div>

    <div class="form-group">
        <label for="jsoncontent">AppSettings Json</label>        
        <InputTextArea rows="15" class="form-control" id="jsoncontent" placeholder="Json content" @bind-Value="@Application.JsonContent"></InputTextArea>
    </div>


    <button type="button" class="btn btn-primary" @onclick="SaveAppliction">Save</button>
    <button type="button" class="btn btn-success" @onclick="PublishAppliction">Publish</button>
    <button type="button" class="btn btn-danger" @onclick="RemoveAppliction">Remove</button>   
</EditForm>


@code {
    private bool DisplayAlert { get; set; } = false;
    public string AlertMessage { get; set; }


    private string SettingKey { get; set; }
    private string SettingValue { get; set; }

    [Parameter]
    public string AppName { get; set; }

    private ApplicationEntity Application { get; set; } = new ApplicationEntity();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (AppName != null)
        {
            Application = await RedisService.GetApplicationAsync(AppName);
        }


        await Task.CompletedTask;
    }    

    private async Task SaveAppliction()
    {
        await RedisService.SaveApplicationAsync(Application);

        DisplayAlert = true;
        AlertMessage = $"'{Application.Name}' has been saved.";
    }

    private async Task PublishAppliction()
    {
        await RedisService.PublishChangesAsync(Application.Name);

        DisplayAlert = true;
        AlertMessage = $"'{Application.Name}' has been published.";
    }

    private async Task RemoveAppliction()
    {
        await RedisService.RemoveApplicationAsync(Application);
        
        DisplayAlert = true;
        AlertMessage = $"'{Application.Name}' has been removed.";
        Application = new ApplicationEntity();
    }
}